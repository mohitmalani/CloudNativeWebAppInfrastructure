
AWSTemplateFormatVersion: '2010-09-09'
Description: CSYE 6225 IaC Demo

# Parameters that can be passed externally
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: "String"
    Default: "10.0.0.0/16"
  Subnets:
    Description: "No. of subnets"
    Type: "String"
    Default: "3"
  Offset:
    Description: "No. of offsets"
    Type: "String"
    Default: "8"
  PublicCIDR:
    Description: "Public Cidr"
    Type: "String"
    Default: "0.0.0.0/0"
  AMI:
    Description: "AMI"
    Type: "String"
    Default: ""
  Env:
    Description: "Environment"
    Type: "String"
    Default: ""
  keyName:
   Description: "keyName"
   Type: "String"
   Default: ""
  Tld:
    Description: "Top Level Domain"
    Type: "String"
    Default: ""

## DB params:
  Engine:
    Description: "Engine"
    Type: "String"
    Default: ""
  EngineVersion:
    Description: "EngineVersion"
    Type: "String"
    Default: ""
  InstanceClass:
    Description: "InstanceClass"
    Type: "String"
    Default: ""
  AZDeployment:
    Description: "AZDeployment"
    Type: "String"
    Default: ""
  InstanceIdentifier:
    Description: "InstanceIdentifier"
    Type: "String"
    Default: ""
  DBUsername:
    Description: "DBUsername"
    Type: "String"
    Default: ""
  DBPassword:
    Description: "DBPassword"
    Type: "String"
    Default: ""
  PublicAccess:
    Description: "PublicAccess"
    Type: "String"
    Default: ""
  DBName:
    Description: "DBName"
    Type: "String"
    Default: ""
  Storage:
    Description: "Storage"
    Type: "String"
    Default: "100"
  Zone:
    Description: "Zone"
    Type: "String"
    Default: "us-east-1a"
  RetentionPeriod:
    Description: "RetentionPeriod"
    Type: "String"
    Default: "0"

  HostedZone:
   Description: "HostedZone"
   Type: "String"
   Default: ""
  HostedZoneID:
   Description: "HostedZoneID"
   Type: "String"
   Default: ""
  
  GHRegion:
   Description: "GHRegion"
   Type: "String"
   Default: "us-east-1"
  GHAccount:
   Description: "GHAccount"
   Type: "String"
   Default: "114443752637"
  DynamoDbTable:
   Description: "DynamoDbTable"
   Type: "String"
   Default: "myTableName"
  DynamoDbTable1:
   Description: "DynamoDbTable"
   Type: "String"
   Default: "myTableName1"


Resources:

#####################################
# VPC configurations                #
#####################################
  myVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
#####################################
# Subnet configurations             #
#####################################
  mySubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [0, !Cidr [ !GetAtt myVPC.CidrBlock,  !Ref Subnets, !Ref Offset]]
      AvailabilityZone: !Select
                        - 0
                        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PublicSubnet1"]]
  mySubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [1, !Cidr [ !GetAtt myVPC.CidrBlock, !Ref Subnets, !Ref Offset ]]
      AvailabilityZone: !Select
                        - 1
                        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PublicSubnet2"]]
  mySubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [2, !Cidr [ !GetAtt myVPC.CidrBlock, !Ref Subnets, !Ref Offset ]]
      AvailabilityZone: !Select
                        - 2
                        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PublicSubnet3"]]

# PRIVATE SUBNETS
  mySubnet4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [3, !Cidr [ !GetAtt myVPC.CidrBlock,  !Ref Subnets, !Ref Offset]]
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PrivateSubnet1"]]
  mySubnet5:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [4, !Cidr [ !GetAtt myVPC.CidrBlock,  !Ref Subnets, !Ref Offset]]
      AvailabilityZone: !Select
                        - 4
                        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PrivateSubnet2"]] 
  mySubnet6:
    Type: 'AWS::EC2::Subnet'
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [5, !Cidr [ !GetAtt myVPC.CidrBlock,  !Ref Subnets, !Ref Offset]]
      AvailabilityZone: !Select
                        - 5
                        - !GetAZs
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PrivateSubnet3"]] 

#####################################
# Internet Gateway configurations   #
#####################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "InternetGateway"]] 
  
  # Gateway attachment to the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PublicRouteTable"]] 

# PRIVATE ROUTE TABLE
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "PrivateRouteTable"]] 
#####################################
# Route Table-Subnet configurations #
#####################################
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet2
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref mySubnet3
  PrivateSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref mySubnet4
  PrivateSubnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref mySubnet5
  PrivateSubnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref mySubnet6
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: !Ref PublicCIDR
      GatewayId: !Ref InternetGateway
  
#####################################
# Security Group configurations     #
#####################################          
  InstanceSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
       GroupDescription: Allow http to client host
       VpcId:
           Ref: myVPC
       SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 22
         ToPort: 22
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 443
         ToPort: 443
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 3000
         ToPort: 3000
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 5432
         ToPort: 5432
         CidrIp: 0.0.0.0/0
       SecurityGroupEgress:
       - IpProtocol: tcp
         FromPort: 80
         ToPort: 80
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 5432
         ToPort: 5432
         CidrIp: 0.0.0.0/0
       - IpProtocol: tcp
         FromPort: 443
         ToPort: 443
         CidrIp: 0.0.0.0/0
       Tags:
        - Key: Name
          Value: application

  DatabaseSecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
       GroupDescription: Allow http to client host
       VpcId:
           Ref: myVPC
       SecurityGroupIngress:
       - IpProtocol: tcp
         FromPort: 5432
         ToPort: 5432
         SourceSecurityGroupId: !Ref InstanceSecurityGroup
       Tags:
        - Key: Name
          Value: database

#####################################
# S3 bucket configurations          #
#####################################  
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Join [".", [!Select [2, !Split ['/', !Ref AWS::StackId]], !Ref Env, !Ref Tld]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Id: LifecycleRule
            Prefix: mys3rule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA

#####################################
# RDS Parameter group               #
##################################### 
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation PostgreSQL Parameter Group
      Parameters:
        log_statement: "all"
        log_duration: "on"
        rds.force_ssl: 0
      Family: postgres12
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "RDSDBParameterGroup"]] 

#####################################
# RDS Subnet group                  #
##################################### 
  myDBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet group
      SubnetIds: 
        - !Ref mySubnet4
        - !Ref mySubnet5
        - !Ref mySubnet6
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref AWS::StackName, "DBSubnetGroup"]] 

#####################################
# RDS Instance                      #
##################################### 
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: !Ref Engine
      EngineVersion: !Ref EngineVersion
      DBInstanceClass: !Ref InstanceClass
      MultiAZ: !Ref AZDeployment
      DBInstanceIdentifier: !Ref InstanceIdentifier
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref myDBSubnetGroup
      AllocatedStorage: !Ref Storage
      DBParameterGroupName: !Ref RDSDBParameterGroup
      AvailabilityZone: !Ref Zone
      BackupRetentionPeriod: !Ref RetentionPeriod
      VPCSecurityGroups:
      - !Ref DatabaseSecurityGroup

#####################################
# IAM Policy config                 #
#####################################

  IAMRole:
   Type: AWS::IAM::Role
   Properties:
     RoleName: "EC2-CSYE6225"
     AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Principal:
             Service:
               - ec2.amazonaws.com
           Action:
             - 'sts:AssumeRole'
     ManagedPolicyArns:
       - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  AWSLambdaIAMRole:
   Type: AWS::IAM::Role
   Properties:
     RoleName:
       Fn::Sub: lambda-role
     AssumeRolePolicyDocument:
       Statement:
         - Action:
             - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
               - lambda.amazonaws.com
       Version: "2012-10-17"
     ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AWSLambdaExecute
       - arn:aws:iam::aws:policy/AmazonS3FullAccess
       - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  

#####################################
# IAM Policy config                 #
#####################################
  IAMPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: WebAppS3
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Action:
           - s3:PutObject
           - s3:GetObject
           - s3:DeleteObject
           - s3:Get*
           - s3:List*
           Resource:
           - !Join [":::",["arn:aws:s3", !Ref S3Bucket]]
           - !Join ["/", [!Join [":::",["arn:aws:s3", !Ref S3Bucket]],"*"]]
     Roles:
       - !Ref IAMRole

  GHUploadToS3IAMPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: GH-Upload-To-S3
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Action:
           - s3:PutObject
           - s3:Get*
           - s3:List*
           Resource:
           - "*"
     Users:
       - ghactions


  GHEC2AMIIAMPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: gh-ec2-ami
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Action:
           - "ec2:AttachVolume"
           - "ec2:AuthorizeSecurityGroupIngress"
           - "ec2:CopyImage"
           - "ec2:CreateImage"
           - "ec2:CreateKeypair"
           - "ec2:CreateSecurityGroup"
           - "ec2:CreateSnapshot"
           - "ec2:CreateTags"
           - "ec2:CreateVolume"
           - "ec2:DeleteKeyPair"
           - "ec2:DeleteSecurityGroup"
           - "ec2:DeleteSnapshot"
           - "ec2:DeleteVolume"
           - "ec2:DeregisterImage"
           - "ec2:DescribeImageAttribute"
           - "ec2:DescribeImages"
           - "ec2:DescribeInstances"
           - "ec2:DescribeInstanceStatus"
           - "ec2:DescribeRegions"
           - "ec2:DescribeSecurityGroups"
           - "ec2:DescribeSnapshots"
           - "ec2:DescribeSubnets"
           - "ec2:DescribeTags"
           - "ec2:DescribeVolumes"
           - "ec2:DetachVolume"
           - "ec2:GetPasswordData"
           - "ec2:ModifyImageAttribute"
           - "ec2:ModifyInstanceAttribute"
           - "ec2:ModifySnapshotAttribute"
           - "ec2:RegisterImage"
           - "ec2:RunInstances"
           - "ec2:StopInstances"
           - "ec2:TerminateInstances"
           Resource:
           - "*"
     Users:
       - ghactions

  LambdaUploadToS3IAMPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: AWSLambdaBasicSESExecutionRole
     PolicyDocument:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Action:
           - 'logs:CreateLogGroup'
           Resource:
           - 'arn:aws:logs:us-east-1:114443752637:*'
         - Effect: Allow
           Action:
           - 'logs:CreateLogStream'
           - 'logs:PutLogEvents'
           - 'logs:DescribeLogStreams'
           Resource:
           - 'arn:aws:logs:us-east-1:114443752637:log-group:/aws/lambda/csye6225-lambda-function:*'
         - Effect: Allow
           Action:
             - 'ses:VerifyEmailAddress'
             - 'ses:SendEmail'
             - 'ses:SendRawEmail'
           Sid: "LambdaSESAccess"
           Resource:
             - '*'
     Roles:
       - !Ref AWSLambdaIAMRole


#####################################
# Instance Profile configurations   #
#####################################
  MyInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref IAMRole

#####################################
# EC2 Instance configurations       #
#####################################  
  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref AMI
      IamInstanceProfile: !Ref MyInstanceProfile
      KeyName: !Ref keyName
      InstanceType: "t2.micro"
      SubnetId: !Ref mySubnet1
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      BlockDeviceMappings: 
      - DeviceName: "/dev/sda1"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            cat > /etc/environment << 'EOF'
            DB_USERNAME="csye6225_user"
            DB_NAME="csye6225"
            DB_PASSWORD="LogMeiN!"
            DB_CONNECTION=${MyDB.Endpoint.Address}
            BUCKET_NAME=${S3Bucket}
            PORT="5432"
            AWS_REGION="us-east-1"
            EOF

            cat > /etc/profile.d/load_env.sh << 'EOF'
            export DB_USERNAME="csye6225_user"
            export DB_NAME="csye6225"
            export DB_PASSWORD="LogMeiN!"
            export DB_CONNECTION=${MyDB.Endpoint.Address}
            export BUCKET_NAME=${S3Bucket}
            export PORT="5432"
            export AWS_REGION="us-east-1"
            sleep 10
            EOF

            sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 3000
            sudo systemctl enable node.service
            sudo systemctl start node.service
            sudo systemctl status node.service
  
  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneID
      Name: !Ref HostedZone
      Type: A   
      TTL: 900
      ResourceRecords:
      - !GetAtt MyEC2Instance.PublicIp

#####################################
# SNS Topic    #
#####################################
  MySNSTopic:
   Type: AWS::SNS::Topic
   DependsOn:  
     - AWSLambda
   Properties:
     TopicName: csye6226-sns-topic-Tv01
     DisplayName: csye6226-sns-topic
     Subscription:
       - Protocol: lambda
         Endpoint: !GetAtt AWSLambda.Arn

#####################################
# SNS Topic Policy    #
#####################################

  SNSTopicPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: SNSTopicPolicy
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Action:
           - sns:Publish
           Resource:
           - !Ref MySNSTopic
     Roles:
       - !Ref IAMRole

#####################################
# DynamoDB Policy    #
#####################################

  DynamoDBPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: DynamoDBPolicy
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         - Effect: Allow
           Action: 
           - 'dynamodb:Query'
           - 'dynamodb:List*'
           - 'dynamodb:DescribeReservedCapacity*'
           - 'dynamodb:DescribeLimits'
           - 'dynamodb:DescribeTimeToLive'
           Resource: "*"
         - Effect: Allow
           Action: 
           - 'dynamodb:BatchGet*'
           - 'dynamodb:DescribeStream'
           - 'dynamodb:DescribeTable'
           - 'dynamodb:Get*'
           - 'dynamodb:GetItem'
           - 'dynamodb:Scan'
           - 'dynamodb:CreateTable'
           - 'dynamodb:DeleteItem'
           - 'dynamodb:Update*'
           - 'dynamodb:PutItem'
           Resource: "arn:aws:dynamodb:*:*:table/myTableName"
     Roles:
       - !Ref IAMRole

#####################################
# Lambda Policy    #
#####################################

  LambdaUploadToS3IAMPolicy:
   Type: 'AWS::IAM::Policy'
   Properties:
     PolicyName: AWSLambdaBasicSESExecutionRole
     PolicyDocument:
       Version: '2012-10-17'
       Statement:
         - Effect: Allow
           Action:
           - 'logs:CreateLogGroup'
           Resource:
           - 'arn:aws:logs:us-east-1:114443752637:*'
         - Effect: Allow
           Action:
           - 'logs:CreateLogStream'
           - 'logs:PutLogEvents'
           - 'logs:DescribeLogStreams'
           Resource:
           - 'arn:aws:logs:us-east-1:114443752637:log-group:/aws/lambda/csye6225-lambda-function:*'
         - Effect: Allow
           Action:
             - 'ses:VerifyEmailAddress'
             - 'ses:SendEmail'
             - 'ses:SendRawEmail'
           Sid: "LambdaSESAccess"
           Resource:
              - '*'
         - Effect: Allow
           Action:
             - 'dynamodb:BatchGet*'
             - 'dynamodb:DescribeStream'
             - 'dynamodb:DescribeTable'
             - 'dynamodb:Get*'
             - 'dynamodb:DeleteItem'
             - 'dynamodb:Scan'
             - 'dynamodb:UpdateItem'
             - 'dynamodb:PutItem'
             - 'dynamodb:GetItem'
           Resource:
             - !Sub 'arn:aws:dynamodb:${GHRegion}:${GHAccount}:table/${DynamoDbTable}'
             - !Sub 'arn:aws:dynamodb:${GHRegion}:${GHAccount}:table/${DynamoDbTable1}'
     Roles:
       - !Ref AWSLambdaIAMRole



#####################################
# Lambda Function    #
#####################################

  AWSLambda:
   Type: AWS::Lambda::Function
   Properties:
     Code:
       S3Bucket : lambda.prod.mohitmalani.tech
       S3Key: serverless.zip
     Description: csye6225-lambda-function
     FunctionName: csye6225-lambda-function
     Handler: ./src/index.handler
     Role: 
       Fn::GetAtt:
         - AWSLambdaIAMRole
         - Arn
     Runtime: nodejs14.x

  LambdaInvokePermission:
   Type: AWS::Lambda::Permission
   Properties:
     Action: lambda:InvokeFunction
     Principal: sns.amazonaws.com
     SourceArn: !Ref MySNSTopic
     FunctionName: arn:aws:lambda:us-east-1:114443752637:function:csye6225-lambda-function




#####################################
# DynamoDB    #
#####################################


  myDynamoDBTable: 
   Type: AWS::DynamoDB::Table
   Properties: 
     TableName: "myTableName"
     AttributeDefinitions: 
       - 
         AttributeName: "Token"
         AttributeType: "S"
     KeySchema: 
       - 
         AttributeName: "Token"
         KeyType: "HASH"
     ProvisionedThroughput: 
       ReadCapacityUnits: "5"
       WriteCapacityUnits: "5"
     TimeToLiveSpecification: 
       AttributeName: "ExpireToken"
       Enabled: true
   DependsOn:
     - DynamoDBPolicy

  myDynamoDBTable1: 
   Type: AWS::DynamoDB::Table
   Properties: 
     TableName: "myTableName1"
     AttributeDefinitions: 
       - 
         AttributeName: "Email"
         AttributeType: "S"
     KeySchema: 
       - 
         AttributeName: "Email"
         KeyType: "HASH"
     ProvisionedThroughput: 
       ReadCapacityUnits: "5"
       WriteCapacityUnits: "5"
     TimeToLiveSpecification: 
       AttributeName: "ExpireToken"
       Enabled: true
   DependsOn:
     - DynamoDBPolicy
 
# Output params
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
  Subnet1:
    Description: Subnet1 ID
    Value: !Ref mySubnet1
  Subnet2:
    Description: Subnet2 ID
    Value: !Ref mySubnet2
  Subnet3:
    Description: Subnet3 ID
    Value: !Ref mySubnet3
  InternetGatewayId:
    Description: InternetGateway ID
    Value: !Ref InternetGateway

